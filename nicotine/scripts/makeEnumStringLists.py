import re
import sys

#finds an enum class block
match_pattern = r"^enum class [\w]+{.*\n(?:^\s+[\w_]+.*\n)+};"
replace_match_pattern = r"^(\/\/--- begin auto generated by python script ---\n)[\s\S]*(\/\/---  end auto generated by python script  ---)\n"

def processFile(fname):
    try: 
        with open(fname, 'r') as file:
            content = file.read()
            matches = re.findall(match_pattern, content, re.M)
            if checkValid == []:
                print("invalid")
                return 
    except FileNotFoundError:
        print(f"Error: file {fname} not found")
        return
    if len(matches) > 1:
        print("too many matches")
        return
    if len(matches) == 0:
        print("no matches")
        return

    with open("pyscriptbackup.txt", 'w') as backup:
        backup.write(content)

    for i in range(len(matches)):
        lines = matches[i].splitlines()
        indent0 = re.search(r"^(\s*)", lines[0]).group(1)
        indent1 = re.search(r"^(\s*)", lines[1]).group(1)
        enumName = re.search(r"^enum class (\w+){", lines[0]).group(1)

        code = indent0
        code += "const std::string "
        code += enumName
        code += "Strings[] = {"
    #    code += "\n"
        for i in range(1, len(lines) - 1):
    #        code += indent1
            code += "\""
            code += re.findall(r"[\w_]+", lines[i])[0]
            code += "\","
    #        code += "\n"
        code += indent0
        code += "};\n"
        print(code)
    
#    code += f"std::ostream& operator<<(std::ostream& out, {enumName} t)"
#    code += "{ return out << "
#    code += enumName
#    code += "Strings[(int)t]; }\n"

    #new_content = re.sub(replace_match_pattern, f"//--- begin auto generated by python script ---\n{code}//---  end auto generated by python script  ---\n", content, flags=re.M)



    #with open(fname, 'w') as file:
        #file.write(new_content)

if len(sys.argv) > 1:
    arguments = sys.argv[1:]
    for arg in arguments:
        check = input(f"generate in {arg}? [y]")
        if check == 'y':
            processFile(arg)
else:
    print("No arguments provided.")


